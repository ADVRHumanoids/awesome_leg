# XBot2 Awesome Leg configuration file, with a tip cartesian impedance control plugin.

# description
XBotInterface:
  urdf_path: $(rospack find awesome_leg)/description/urdf/generated/awesome_leg_xbot.urdf
  srdf_path: $(rospack find awesome_leg)/description/srdf/awesome_leg.srdf

# model interface
ModelInterface:
  model_type: RBDL
  is_model_floating_base: false

# hal
xbotcore_device_configs:
    sim: $PWD/../ecat_config/hal/awesome_leg_gz.yaml
    dummy: $PWD/../ecat_config/hal/awesome_leg_dummy.yaml
    ec_pos: $PWD/../ecat_config/hal/awesome_leg_ec_all.yaml
    ec_imp: $PWD/../ecat_config/hal/awesome_leg_ec_all.yaml
    ec_idle: $PWD/../ecat_config/hal/awesome_leg_ec_all.yaml

# threads
xbotcore_threads:
    rt_main:  {sched: fifo , prio: 60, period: 0.01, core_id: 0}
#    bt_root: {sched: other, prio: 0 , period: 0.01}
    bt_root: {sched: fifo, prio: 60 , period: 0.01}
    traj_replay: {sched: fifo , prio: 60, period: 0.001, core_id: 1}
#    rt_main_slow:  {sched: fifo , prio: 60, period: 0.01, core_id: 1}
    nrt_main: {sched: other, prio: 0 , period: 0.01}
#    bt_components: {sched: fifo , prio: 60, period: 0.001, core_id: 1}
#    bt_root: {sched: fifo , prio: 60, period: 0.001, core_id: 2}
#    iq_calib:  {sched: fifo , prio: 60, period: 0.01, core_id: 3}
#    base_est: {sched: fifo , prio: 60, period: 0.01, core_id: 3}
#    bus_power:  {sched: fifo , prio: 60, period: 0.01, core_id: 3}

# plugins
xbotcore_plugins:

#    homing_landing:
#        thread: rt_main
#        type: homing_example
#        params:
#            qhome: {value: [0.8, 0.9], type: Eigen::VectorXd}

    ros_io: {thread: nrt_main, type: ros_io}

    ros_control: {thread: nrt_main, type: ros_control}

    ec_ros: {thread: nrt_main, type: ec_ros}

    timer_rt:
        thread: rt_main
        type: timer_rt
        params:
            timer_plugin_topicname: {value: "timer", type: string}
            reset_timers_servname: {value: "reset_timers", type: string}

    base_est_rt:
        thread: rt_main
        type: base_est_rt
        params:

            urdf_path_base_est: {value: $PWD/../../description/urdf/generated/awesome_leg.urdf, type: file} # used by the model interface
            srdf_path_base_est: {value: $PWD/../../description/srdf/awesome_leg_test_rig.srdf, type: file}

            ik_problem_path: {value: $PWD/../cartesio/energy_recovery/awesome_leg_base_estimation.yaml, type: yamlfile}

            obs_bw: {value: 1.0, type: double}
            svd_thresh: {value: 0.5, type: double}

            contact_release_thr: {value: 50.0, type: double}
            contact_attach_thr: {value: 60.0, type: double}

            mat_path: {value: /tmp/, type: string}

            use_g_during_flight: {value: true, type: bool}

    jmp_replayer_rt:
        thread: traj_replay
        type: jmp_replayer_rt
        params:

            # mat_path: {value: /tmp/jump_generation_15-11-2022-17_04_43/, type: string}
            # mat_path: {value: /tmp/jump_generation_24-02-2023-00_50_48/, type: string}
            mat_path: {value: /tmp/jump_generation_24-02-2023-02_05_21/, type: string}

            mat_name: {value: apex_awesome_jump_ref.mat, type: string}
            replay_stiffness: {value: [2000.0, 2000.0], type: Eigen::VectorXd}
            replay_damping: {value: [30.0, 30.0], type: Eigen::VectorXd}
            touchdown_stiffness: {value: [80.0, 80.0], type: Eigen::VectorXd}
            touchdown_damping: {value: [10.0, 10.0], type: Eigen::VectorXd}

            verbose: {value: false, type: bool}

    bus_power_rt:
        thread: rt_main
        type: bus_power_rt
        params:

            urdf_path: {value: $PWD/../../description/urdf/generated/awesome_leg.urdf, type: file} # used by the model interface
            srdf_path: {value: $PWD/../../description/srdf/awesome_leg_test_rig.srdf, type: file}

            mat_path: {value: /tmp/, type: string}
            dump_mat_suffix: {value: bus_power_rt, type: string}
            matlogger_buffer_size: {value: 1e5, type: double}

            topic_ns: {value: "iq_model", type: string}
            set_monitor_state_servname: {value: "start_rec_energy_monitor", type: string}

            verbose: {value: false, type: bool}

            red_ratio: {value: [0.02, 0.02], type: Eigen::VectorXd}  # gear reduction ratio of the actuator (always <=1)
            K_t: {value: [0.045, 0.045], type: Eigen::VectorXd} # from datasheets: 0.045; torque constant ([Nm/A])
            K_d0: {value: [3.24, 10.72], type: Eigen::VectorXd} # static friction torque coefficient ( tau_d0 = K_d* sign(joint_vel) )
            K_d1: {value: [1.45, 1.77], type: Eigen::VectorXd} # dynamical friction torque coefficient ( tau_d1 = K_d* joint_vel )
            rotor_axial_MoI: {value: [6.6e-5, 6.6e-5], type: Eigen::VectorXd}  # approximate axial moment of inertia of the rotor ([Kg m^2]); real value 6.5717708e-5
            R: {value: [0.085, 0.085], type: Eigen::VectorXd} # phase resistance
            L_leak: {value: [0.0, 0.0], type: Eigen::VectorXd}
            L_m: {value: [0.000104, 0.000104], type: Eigen::VectorXd}
            bus_p_leak: {value: 48, type: double} # [W]

    bt_rt:
        thread: bt_root
        type: bt_rt
        params:

            mat_path: {value: /tmp/, type: string}

            use_zmq_pub: {value: false, type: bool}
            use_bt_log: {value: false, type: bool}

#            bt_description_path: {value: $PWD/../bt_xml/energy_rec_bt_rt_test2.xml, type: file} # used by the model interface
            bt_description_path: {value: $PWD/../bt_xml/energy_rec_bt.xml, type: file} # used by the model interface

            verbose: {value: false, type: bool}

    temp_monitor_rt:
        thread: rt_main
        type: temp_monitor_rt
        params:

            mat_path: {value: "/tmp/", type: string}

            verbose: {value: false, type: bool}

            driver_temp_threshold: {value: 55.0, type: double}
            driver_temp_threshold_cooling: {value: 45.0, type: double}

    idler_rt:
        thread: rt_main
        type: idler_rt
        params:

            verbose: {value: false, type: bool}

    impact_detector_rt:
        thread: rt_main
        type: impact_detector_rt
        params:

            mat_path: {value: /tmp/, type: string}

            use_gz_truth: {value: true, type: bool}

            verbose: {value: false, type: bool}

    plugins_mngr_rt:
        thread: rt_main
        type: plugins_mngr_rt
        params:

            plugin_list: {value: ["idler_rt", "temp_monitor_rt", "jmp_replayer_rt", "timer_rt", "bus_power_rt", "base_est_rt", "impact_detector_rt"], type: vector<string>}

            verbose: {value: false, type: bool}

    cartesio_imp_cntrl_rt:
           thread: rt_main
           type: cart_imp_cntrl_rt
           params:

               urdf_path: {value: $PWD/../../description/urdf/generated/awesome_leg.urdf, type: file}

               srdf_path: {value: $PWD/../../description/srdf/awesome_leg_test_rig.srdf, type: file}

               ci_yaml_path: {value: $PWD/../cartesio/energy_recovery/awesome_leg_landing_impedance.yaml, type: file}

               test_bare_imp_cntrl : {value: true, type: bool}

# global parameters
xbotcore_param:
    /jm/tx_filter_autostart: {value: true, type: bool}
    /jm/tx_filter_cutoff: {value: 10.0, type: double}
    # /jm/tx_filter_cutoff: {value: 500.0, type: double}
    /jm/enable_safety: {value: true, type: bool}  # safety checks (can be disabled in running a simulation. DO NOT DO THIS ON A REAL PROTOTYPE)
