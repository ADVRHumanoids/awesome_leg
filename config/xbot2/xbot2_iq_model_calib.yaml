# XBot2 Awesome Leg configuration file, with a tip cartesian impedance control plugin.

# description
XBotInterface:
  urdf_path: $(rospack find awesome_leg)/description/urdf/generated/awesome_leg_xbot.urdf
  srdf_path: $(rospack find awesome_leg)/description/srdf/awesome_leg.srdf

# model interface
ModelInterface:
  model_type: RBDL
  is_model_floating_base: false

# hal
xbotcore_device_configs:
    sim: $PWD/ecat_config/hal/awesome_leg_gz.yaml
    dummy: $PWD/ecat_config/hal/awesome_leg_dummy.yaml
    ec_pos: $PWD/ecat_config/hal/awesome_leg_ec_all.yaml
    ec_imp: $PWD/ecat_config/hal/awesome_leg_ec_all.yaml
    ec_idle: $PWD/ecat_config/hal/awesome_leg_ec_all.yaml

# threads
xbotcore_threads:
    rt_main:  {sched: fifo , prio: 60, period: 0.01, core_id: 0}
    rt_main_slow:  {sched: fifo , prio: 60, period: 0.01, core_id: 1}
    nrt_main: {sched: other, prio: 0 , period: 0.01}

# plugins
xbotcore_plugins:

    # homing_iq_calibration:
    #     thread: rt_main
    #     type: homing_example
    #     params:
    #         qhome: {value: [1.57, -2.16], type: Eigen::VectorXd}

    ros_io: {thread: nrt_main, type: ros_io}

    ec_ros: {thread: nrt_main, type: ec_ros}

    iq_model_calib_rt:
        thread: rt_main_slow
        type: iq_model_calib_rt
        params:

            urdf_path: {value: $PWD/../../description/urdf/generated/awesome_leg_xbot.urdf, type: file} # used by the model interface

            mat_path: {value: /tmp/, type: string}
            dump_mat_suffix: {value: iq_estimation, type: string}
            matlogger_buffer_size: {value: 1e5, type: double}

            red_ratio: {value: [0.02, 0.02], type: Eigen::VectorXd}  # gear reduction ratio of the actuator (always <=1)

            K_t: {value: [0.045, 0.045], type: Eigen::VectorXd} # from datasheets: 0.045; torque constant ([Nm/A])

            K_d0_ig: {value: [0.0, 0.0], type: Eigen::VectorXd} # initial guess for the static friction torque coefficient ( tau_d0 = K_d* sign(joint_vel) )
            K_d1_ig: {value: [0.0, 0.0], type: Eigen::VectorXd} # initial guess for the dynamical friction torque coefficient ( tau_d1 = K_d* joint_vel )

            rotor_axial_MoI: {value: [6.6e-5, 6.6e-5], type: Eigen::VectorXd}  # approximate axial moment of inertia of the rotor ([Kg m^2]); real value 6.5717708e-5

            der_est_order: {value: 1, type: int}

            mov_avrg_cutoff_freq_iq: {value: 15.0, type: double} # cutoff frequency of the moving average filter ([Hz])
            mov_avrg_cutoff_freq_iq_meas: {value: 15.0, type: double} # cutoff frequency of the moving average filter ([Hz])
            mov_avrg_cutoff_freq_q_dot: {value: 15.0, type: double} # cutoff frequency of the moving average filter ([Hz])
            mov_avrg_cutoff_freq_tau: {value: 15.0, type: double} # cutoff frequency of the moving average filter ([Hz])

            iq_calib_window_size: {value: 10000, type: int}

            verbose: {value: false, type: bool}

            lambda_qp_reg: {value: 0.000001, type: double}
            alpha: {value: 5, type: int}
            q_dot_3sigma: {value: 0.01, type: double} # max amplitute of the noise contained in the velocity signal
            # (basically equal to 3 * sigma, where sigma is the standard deviation of the noise)


# global parameters
xbotcore_param:
    /jm/tx_filter_autostart: {value: true, type: bool}
    /jm/tx_filter_cutoff: {value: 2.0, type: double}
    # /jm/tx_filter_cutoff: {value: 500.0, type: double}
    /jm/enable_safety: {value: true, type: bool}  # safety checks (can be disabled in running a simulation. DO NOT DO THIS ON A REAL PROTOTYPE)
