# XBot2 Awesome Leg configuration file. To be used during testing.

# description
XBotInterface:
  urdf_path: $(rospack find awesome_leg)/description/urdf/generated/awesome_leg_xbot.urdf
  srdf_path: $(rospack find awesome_leg)/description/srdf/awesome_leg.srdf

# model interface
ModelInterface:
  model_type: RBDL
  is_model_floating_base: false

# hal
xbotcore_device_configs:
    sim: $PWD/../ecat_config/hal/awesome_leg_gz.yaml
    dummy: $PWD/../ecat_config/hal/awesome_leg_dummy.yaml
    ec_pos: $PWD/../ecat_config/hal/awesome_leg_ec_all.yaml
    ec_imp: $PWD/../ecat_config/hal/awesome_leg_ec_all.yaml
    ec_idle: $PWD/../ecat_config/hal/awesome_leg_ec_all.yaml

# threads
xbotcore_threads:
    rt_main:  {sched: fifo , prio: 60, period: 0.001}
    nrt_main: {sched: other, prio: 0 , period: 0.01}

# plugins
xbotcore_plugins:

#    homing_min:
#        thread: rt_main
#        type: homing_example
#        params:
#            qhome: {value: [1.5708, 0.0], type: Eigen::VectorXd}

    homing0:
        thread: rt_main
        type: homing_example
        params:
            qhome: {value: [0, 0], type: Eigen::VectorXd}

    homing1:
        thread: rt_main
        type: homing_example
        params:
            qhome: {value: [0.6, 0.6], type: Eigen::VectorXd}

    homing2:
        thread: rt_main
        type: homing_example
        params:
            qhome: {value: [1.2, 1.2], type: Eigen::VectorXd}

    homing3:
        thread: rt_main
        type: homing_example
        params:
            qhome: {value: [0.8, 0.4], type: Eigen::VectorXd}

    homing4:
        thread: rt_main
        type: homing_example
        params:
            qhome: {value: [0.6, 1.2], type: Eigen::VectorXd}

    homing5:
        thread: rt_main
        type: homing_example
        params:
            qhome: {value: [0.4, -0.4], type: Eigen::VectorXd}

    ros_io: {thread: nrt_main, type: ros_io}

    ros_control: {thread: nrt_main, type: ros_control}

    ec_ros: {thread: nrt_main, type: ec_ros}

    bus_power_rt:
        thread: rt_main
        type: bus_power_rt
        params:

            urdf_path: {value: $PWD/../../description/urdf/generated/awesome_leg.urdf, type: file} # used by the model interface
            srdf_path: {value: $PWD/../../description/srdf/awesome_leg_test_rig.srdf, type: file}

            mat_path: {value: /home/embedded/Desktop/jump_generation_24-02-2023-12_13_45/, type: string}
            dump_mat_suffix: {value: bus_power_rt, type: string}
            matlogger_buffer_size: {value: 1e6, type: double}

            topic_ns: {value: "iq_model", type: string}
            set_monitor_state_servname: {value: "start_rec_energy_monitor", type: string}

            verbose: {value: false, type: bool}

            red_ratio: {value: [0.02, 0.02], type: Eigen::VectorXd}  # gear reduction ratio of the actuator (always <=1)
            K_t: {value: [0.045, 0.045], type: Eigen::VectorXd} # from datasheets: 0.045; torque constant ([Nm/A])
            K_d0: {value: [3.24, 10.72], type: Eigen::VectorXd} # static friction torque coefficient ( tau_d0 = K_d* sign(joint_vel) )
            K_d1: {value: [1.45, 1.77], type: Eigen::VectorXd} # dynamical friction torque coefficient ( tau_d1 = K_d* joint_vel )
            rotor_axial_MoI: {value: [6.6e-5, 6.6e-5], type: Eigen::VectorXd}  # approximate axial moment of inertia of the rotor ([Kg m^2]); real value 6.5717708e-5
            R: {value: [0.085, 0.085], type: Eigen::VectorXd} # phase resistance
            L_leak: {value: [0.0, 0.0], type: Eigen::VectorXd}
            L_m: {value: [0.000104, 0.000104], type: Eigen::VectorXd}
            bus_p_leak: {value: 38, type: double} # [W] - battery setup
            # bus_p_leak: {value: 46.0, type: double} # [W]

# global parameters
xbotcore_param:
    /jm/tx_filter_autostart: {value: true, type: bool}
    /jm/tx_filter_cutoff: {value: 2.0, type: double}

