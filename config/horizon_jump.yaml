# USED FOR SETTING SOME SOLVER OPTIONS

horizon:
 
 urdf_path: $(find awesome_leg_pholus)/description/urdf/awesome_leg_complete.urdf # urdf relative path (wrt to the package)
 
 media_path: $(find awesome_leg_pholus)/awesome_leg_pholus/media/horizon_jump # relative path where graphs, etc.. are saved

 opt_results_path: $(find awesome_leg_pholus)/awesome_leg_pholus/opt_results/horizon_jump # where optimization .mat files are saved
 
 xbot_command_pub: # some horizon-xbot configuration parameters

  approaching_traj: # configurations for the node used to move the leg to its initial position

    n_intervals: 100 # number of intervals of the generated trajectory
    T_execution: 5.0 # desired execution time
    standby_time: 1.0 # time delay between the finished approach maneouver and the start of the real trajectory

  joint_cntrl: # xbot joint cntrl specific parameters

    hip_joint:

      # xbot2 control modes codes (bitmask, p-v-e-k-d->[1,2,4,8,16], where p is the LSB); to combine control mode, simply sum the single control codes
      # impedance (pos+kp+kd) + torque f.f. code: -> 29
      # simple impedance (pos+kp+kd) code: -> 25
      control_mode: 25
      stiffness: 500.0
      damping: 5.0

    knee_joint:

      control_mode: 25 # xbot2 control modes codes (bitmask, p-v-e-k-d->[1,2,4,8,16], where p is the LSB); to combine control mode, simply sum the single control codes
      stiffness: 500.0
      damping: 5.0

 horizon_solver:

   is_adaptive_dt: true 
  
   is_single_dt: false # not used if is_adaptive_dt is set to false; if true, use a single dt as variable, otherwise multiple

   save_sol_as_init: false # if true, the solution is also saved as a candidate for future optimization initializations

   employ_opt_init: false # whether to use the initial guess or not

   constant_dt:

    problem_settings:

      T_f_horizon: 5.0
      T_takeoff_horizon: 3.0
      T_touchdown_horizon: 3.3
      dt: 0.05

      solver:
        name: "ipopt"
        tolerance: 0.0001
        max_iter: 1000
        linear_solver_name: "ma57"  

      test_rig:
        lb: -0.4
        ub:  0.4  

      initial_conditions:
        q_p:     [0.0, 0.0, 0.0]
        q_p_dot: [0.0, 0.0, 0.0]

      cost_weights:
        contact_force: 0.01
        # terminal_postural: 0.0000000001
        small_q_p_ddot: 10
        big_hip_jump: 500
        big_foot_tip_clearance: 50
        weight_hip_i_d: 1.0
        weight_knee_i_d: 1.0

   variable_dt: 

     single_dt:

       problem_settings:   
     
         n_nodes: 100 # number of intervals (total nodes are n_nodes+1)
         n_takeoff: 45
         n_touchdown: 75

         dt_lb: 0.01
         dt_ub: 0.1

         solver:
           name: "ipopt"
           tolerance: 0.0001
           max_iter: 1000
           linear_solver_name: "ma57"    

         test_rig:
           lb: -0.4
           ub:  0.4     

         initial_conditions: 
           q_p:     [0.0, 0.0, 0.0]
           q_p_dot: [0.0, 0.0, 0.0]

         cost_weights:
           contact_force: 0.01
           # terminal_postural: 0.0000000001
           small_q_p_ddot: 1
           big_hip_jump: 1
           big_foot_tip_clearance: 0.00001
           weight_hip_i_d: 1.0
           weight_knee_i_d: 1.0

     multiple_dt:

       problem_settings:  

         n_nodes: 100 # number of intervals (total nodes are n_nodes+1)
         n_takeoff: 40
         n_touchdown: 75
 
         dt_lb: 0.01
         dt_ub: 0.1
 
         solver:
           name: "ipopt"
           tolerance: 0.0001
           max_iter: 1000
           linear_solver_name: "ma57"    

         test_rig:
           lb: -0.4
           ub:  0.4      

         initial_conditions: 
           q_p:     [0.0, 0.0, 0.0]
           q_p_dot: [0.0, 0.0, 0.0]

         cost_weights:
           contact_force: 0.01
           # terminal_postural: 0.0000000001
           small_q_p_ddot: 1
           big_hip_jump: 100
           big_foot_tip_clearance: 10
           weight_hip_i_d: 1.0
           weight_knee_i_d: 1.0

      
    



