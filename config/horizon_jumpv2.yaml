# YAML config file associated with horizon_jump.py script.

horizon:
 
 urdf_path: $(find awesome_leg_pholus)/description/urdf/awesome_leg_complete.urdf # urdf relative path (wrt to the package)
 
 media_path: $(find awesome_leg_pholus)/media/horizon_jump # relative path where graphs, etc.. are saved

 opt_results_path: $(find awesome_leg_pholus)/opt_results/horizon_jump # where optimization .mat files are saved

 replay_trajectory:  true # whether to replay the optimized trajectory on RViz or not
 
 horizon_solver:
  
   save_sol_as_init: true # if true, the solution is also saved as a candidate for future optimization initializations

   employ_opt_init: true # whether to use the initial guess or not

   opt_init_name: "horizon_offline_solver_init" # name of the initial guess to be loaded (will be searched in opt_results_path)

   problem_settings:  
 
     n_nodes: 100 # number of intervals (total nodes are n_nodes+1)
     n_takeoff: 40
     n_touchdown: 75
 
     dt_lb: 0.01
     dt_ub: 0.1
 
     solver:
       name: "ipopt"
       tolerance: 0.0001
       max_iter: 1000
       linear_solver_name: "ma57" 

     transcription:
       name: "multiple_shooting" # options: "multiple_shooting", "direct_collocation"
       integrator: "RK4"
 
     test_rig:
       lb: -0.4
       ub:  0.4      
 
     initial_conditions: 
       q_p:     [0.0, 0.0, 0.0]
       q_p_dot: [0.0, 0.0, 0.0]
 
     cost_weights:
       contact_force: 0.01
       small_q_p_ddot: 1
       big_hip_jump: 300
       big_foot_tip_clearance: 10
       weight_min_input_diff: 0.01 # cost for penalizing differences between successive inputs

 horizon_resampler:
   dt: 0.01
   
 horizon_plotter: # custom plot utility settings

    show_plots: true # whether or not to show the plots when the plotter node is run
    save_fig: true # whether or not to save figures to the destination folder (defaults to true if show_plots is false)
 
 horizon_i_q_estimator: 

    tanh_coeff: 20 # coefficient used by the approximated sign function ( sign = atanh(tanh_coeff * x) ). Kd0 and Kd1 are found in actuators.yaml

 xbot_command_pub: # some horizon-xbot configuration parameters

  approaching_traj: # configurations for the node used to move the leg to its initial position

    n_intervals: 100 # number of intervals of the generated trajectory
    T_execution: 5.0 # desired execution time
    standby_time: 1.0 # time delay between the finished approach maneouver and the start of the real trajectory

  joint_cntrl: # xbot joint cntrl specific parameters

    hip_joint:

      # xbot2 control modes codes (bitmask, p-v-e-k-d->[1,2,4,8,16], where p is the LSB); to combine control mode, simply sum the single control codes
      # impedance (pos+kp+kd) + torque f.f. code: -> 29
      # simple impedance (pos+kp+kd) code: -> 25
      control_mode: 25
      stiffness: 500.0
      damping: 5.0

    knee_joint:

      control_mode: 25 # xbot2 control modes codes (bitmask, p-v-e-k-d->[1,2,4,8,16], where p is the LSB); to combine control mode, simply sum the single control codes
      stiffness: 500.0
      damping: 5.0  
    



