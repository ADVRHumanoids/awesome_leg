# XBot2 Awesome Leg configuration file, with a tip cartesian impedance control plugin.

# description
XBotInterface:
  urdf_path: $(rospack find awesome_leg_pholus)/description/urdf/awesome_leg_RBDL.urdf
  srdf_path: $(rospack find awesome_leg_pholus)/description/srdf/awesome_leg_RBDL.srdf

# model interface
ModelInterface:
  model_type: RBDL
  is_model_floating_base: false

# hal
xbotcore_device_configs:
    sim: $PWD/ecat_config/hal/awesome_leg_gz.yaml
    dummy: $PWD/ecat_config/hal/awesome_leg_dummy.yaml
    ec_pos: $PWD/ecat_config/hal/awesome_leg_ec_all.yaml
    ec_imp: $PWD/ecat_config/hal/awesome_leg_ec_all.yaml
    ec_idle: $PWD/ecat_config/hal/awesome_leg_ec_all.yaml

# threads
xbotcore_threads:
    rt_ci_ell:  {sched: fifo , prio: 60, period: 0.001, core_id: 2}
    rt_ros_cart_imp:  {sched: fifo , prio: 60, period: 0.001, core_id: 2}
    rt_cart_imp:  {sched: fifo , prio: 60, period: 0.001, core_id: 2}
    rt_main:  {sched: fifo , prio: 60, period: 0.001, core_id: 2}
    nrt_main: {sched: other, prio: 0 , period: 0.005}

# plugins
xbotcore_plugins:

    homing:
        thread: rt_main
        type: homing_example

    ros_io: {thread: nrt_main, type: ros_io}

    ros_control: {thread: nrt_main, type: ros_control}
    
    ec_ros: {thread: nrt_main, type: ec_ros}

    imp_cntrl_rt: # point-to-point motion with impedance control
        thread: rt_cart_imp
        type: cartesio_imp_cntrl_rt
        params:
            torque_bias: {value: [0, 0], type: Eigen::VectorXd} # bias torques, estimated via param. identification
            urdf_path: {value: $PWD/../description/urdf/awesome_leg_RBDL.urdf, type: file} 
            srdf_path: {value: $PWD/../description/srdf/awesome_leg_RBDL.srdf, type: file} 
            cartesio_yaml_path: {value: $PWD/cartesio_imp_cntrl_v2_rt.yaml, type: yamlfile} 
            # cartesio_yaml_path: {value: $PWD/cartesio_imp_cntrl_rt.yaml, type: yamlfile} 
            stiffness: {value: [0.0, 0.0], type: Eigen::VectorXd}
            damping: {value: [0.0, 0.0], type: Eigen::VectorXd}
            q_target: {value: [1, 1], type: Eigen::VectorXd}
            t_exec: {value: 5.0, type: double}
            stop_stiffness: {value: [50.0, 50.0], type: Eigen::VectorXd}
            stop_damping: {value: [5.0, 5.0], type: Eigen::VectorXd}

    imp_cntrl_ros_rt: # point-to-point motion with impedance control employing RViz interactive marker
        thread: rt_ros_cart_imp
        type: cartesio_imp_cntrl_ros_rt
        params:
            torque_bias: {value: [0, 0], type: Eigen::VectorXd} # bias torques, estimated via param. identification
            urdf_path: {value: $PWD/../description/urdf/awesome_leg_RBDL.urdf, type: file} 
            srdf_path: {value: $PWD/../description/srdf/awesome_leg_RBDL.srdf, type: file} 
            # cartesio_yaml_path: {value: $PWD/cartesio_imp_cntrl_rt.yaml, type: yamlfile} # impedance control
            cartesio_yaml_path: {value: $PWD/cartesio_imp_cntrl_v2_rt.yaml, type: yamlfile} 
            # cartesio_yaml_path: {value: $PWD/cartesio_acc_cntrl_rt.yaml, type: yamlfile} # classical acceleration control
            stiffness: {value: [0.0, 0.0], type: Eigen::VectorXd}
            damping: {value: [0.0, 0.0], type: Eigen::VectorXd}
            stop_stiffness: {value: [50.0, 50.0], type: Eigen::VectorXd}
            stop_damping: {value: [5.0, 5.0], type: Eigen::VectorXd}

    ell_traj_rt: # elliptical trajectory tracking with configurable parameters (online, via dedicated ROS topics)
        thread: rt_ci_ell
        type: cartesio_ell_rt
        params:
            torque_bias: {value: [0, 0], type: Eigen::VectorXd} # bias torques, estimated via param. identification
            urdf_path: {value: $PWD/../description/urdf/awesome_leg_RBDL.urdf, type: file} 
            srdf_path: {value: $PWD/../description/srdf/awesome_leg_RBDL.srdf, type: file} # cartesian impedance control
            # cartesio_yaml_path: {value: $PWD/cartesio_imp_cntrl_rt.yaml, type: yamlfile} # impedance control
            cartesio_yaml_path: {value: $PWD/cartesio_imp_cntrl_v2_rt.yaml, type: yamlfile} # Interaction + Postural cntrl
            # cartesio_yaml_path: {value: $PWD/cartesio_acc_cntrl_rt.yaml, type: yamlfile}
            stiffness: {value: [0.0, 0.0], type: Eigen::VectorXd}
            damping: {value: [0.0, 0.0], type: Eigen::VectorXd}
            stop_stiffness: {value: [50.0, 50.0], type: Eigen::VectorXd}
            stop_damping: {value: [5.0, 5.0], type: Eigen::VectorXd}
            delta_effort_lim: {value: 0.000001, type: double} # a margin used to safely saturate the trajectory
            use_vel_ff: {value: true, type: bool} # whether or not to send task acc references to the optimizer
            use_acc_ff: {value: true, type: bool} # whether or not to send task acc references to the optimizer
            traj_prm_rmp_time: {value: 4.0, type: double} # when traj. params are changes via topic, they are ramped to their target within this time
            t_exec_traj: {value: 2, type: double} # trajectory execution time
            t_exec_lb: {value: 0.1, type: double} # is t_exec_traj < t_exec_lb, then t_exec_traj is set to t_exec_lb, for safety reasons
            is_forward: {value: true, type: bool} # trajectory execution direction
            a: {value: 0.1, type: double} # "horizontal" semi-axis length
            b: {value: 0.05, type: double} # "vertical" semi-axis length
            x_c: {value: -0.15, type: double} # ellipsis center x-coordinate
            z_c: {value: -0.5, type: double} # ellipsis center y-coordinate
            alpha: {value: 0, type: double} # ellipsis rotation angle

# global parameters
xbotcore_param:
    /jm/tx_filter_autostart: {value: true, type: bool}
    /jm/tx_filter_cutoff: {value: 2.0, type: double}

    
    
