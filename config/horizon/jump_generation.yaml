# YAML config file associated with jump_generation.py script.

horizon:
 
  xacro_path: $(find awesome_leg)/description/urdf/awesome_leg_test_rig.urdf.xacro # urdf relative path (wrt to the package)
  
  urdf_path: $(find awesome_leg)/description/urdf/generated/awesome_leg_test_rig.urdf

  urdf_name: awesome_leg_test_rig

  is_calibrated: false
  
  opt_results_path: $(find awesome_leg)/opt_results/horizon_jump/results # where optimization .mat files are saved

  refine_path: $(find awesome_leg)/opt_results/horizon_jump/results/27_09_2022-18_47_24

  replay_trajectory: true # whether to replay the optimized trajectory on RViz or not

  resample_traj: true
  
  horizon_solver:
  
    sol_mat_name: "awesome_jump" # name of custom mat file where results will be saved

    res_sol_mat_name: "awesome_jump_res"

    ref_sol_mat_name: "awesome_jump_ref"
      
    is_refine_phase: true # whether to use the initial guess or not
  
    opt_init_name: "awesome_jump_init" # name of the initial guess to be loaded (will be searched in opt_results_path)
  
    problem_settings:  

      n_int: 100 # number of intervals (total nodes are n_nodes+1)
      n_takeoff: 34 # 0-based indexing
      n_touchdown: 79

      dt_lb: 0.005
      dt_ub: 0.1
      
      traj_refiner: 

        dt_ref: 0.004

      mu_friction_cone : 0.8 # friction cone coefficient

      is_iq_cnstrnt : false

      is_friction_cone: false

      jnt_limit_margin: 0.02 # [rad] --> this value will shorten the limits of the joint (uniformly) for safety reasons
      jnt_vel_limit_margin : 0.05 # percentage, from 0.0 to 1.0; joint vel limits are restricted by jnt_vel_limit_margin * q_dot_lim

      solver:
        name: "ipopt"
        tolerance: 0.000001
        max_iter: 1000
        cnstrnt_tolerance: 0.0000001
        linear_solver_name: "ma57" 
  
      transcription:
        name: "multiple_shooting" # options: "multiple_shooting", "direct_collocation"
        integrator: "RK4"
  
      initial_conditions: 
        q_p:     [0.0, 0.0, 0.0]
        q_p_dot: [0.0, 0.0, 0.0]
      
      cost_weights:

        scale_factor_costs_base: 100000 # scale factor for costs (other scalings are applied internally)

        contact_force: 0.00001 # cost for penalizing contact forces
        small_q_p_ddot: 0.00001 # cost for penalizing joint accelerations (which are the input)
        weight_min_f_contact_diff: 0.00001 # cost for penalizing differences between successive f_contacts
        weight_min_input_diff: 0.00001 # cost for penalizing differences between successive inputs
        weight_com_height: 1
        big_hip_jump: 0.0000000000000000000001
        big_foot_tip_clearance: 0.0000000000000000000001
      
        traj_refiner: 

          contact_force: 0.00001 # cost for penalizing contact forces
          small_q_p_ddot: 0.00001 # cost for penalizing joint accelerations (which are the input)
          weight_min_f_contact_diff: 0.00001 # cost for penalizing differences between successive f_contacts
          weight_min_input_diff: 0.00001 # cost for penalizing differences between successive inputs
          weight_com_height: 0.00001
          big_hip_jump: 0.0000000000000000000001
          big_foot_tip_clearance: 0.0000000000000000000001

          weight_init_sol_tracking: 0.00001
  
  horizon_resampler:

    dt: 0.001
    mat_path: $(find awesome_leg)/opt_results/horizon_jump/jump_test
    dump_path: /home/andreap/Desktop
    
  horizon_plotter: # custom plot utility settings
  
    show_plots: true # whether or not to show the plots when the plotter node is run
    save_fig: false # whether or not to save figures to the destination folder (defaults to true if show_plots is false)
    save_path: $(find awesome_leg)/media/horizon_jump/jump_test
  
  horizon_i_q_estimator: 
  
    tanh_coeff: 20 # coefficient used by the approximated sign function ( sign = atanh(tanh_coeff * x) ). Kd0 and Kd1 are found in actuators.yaml
  
  # xbot_command_pub: # some horizon-xbot configuration parameters
  
  approaching_traj: # configurations for the node used to move the leg to its initial position
  
    n_intervals: 100 # number of intervals of the generated trajectory
    T_execution: 5.0 # desired execution time
    standby_time: 1.0 # time delay between the finished approach maneouver and the start of the real trajectory
  
  # joint_cntrl: # xbot joint cntrl specific parameters
  
  #   hip_joint:
  
  #     # xbot2 control modes codes (bitmask, p-v-e-k-d->[1,2,4,8,16], where p is the LSB); to combine control mode, simply sum the single control codes
  #     # impedance (pos+kp+kd) + torque f.f. code: -> 29
  #     # simple impedance (pos+kp+kd) code: -> 25
  #     control_mode: 25
  #     stiffness: 500.0
  #     damping: 5.0
  
  #   knee_joint:
  
  #     control_mode: 25 # xbot2 control modes codes (bitmask, p-v-e-k-d->[1,2,4,8,16], where p is the LSB); to combine control mode, simply sum the single control codes
  #     stiffness: 500.0
  #     damping: 5.0  
    
  
  
  
  
