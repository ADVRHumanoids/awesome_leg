# YAML config file associated with horizon_trot_fixed_hip.py script.

horizon:

  urdf_path: $(find awesome_leg)/description/urdf/generated/awesome_leg_test_rig.urdf # urdf relative path (wrt to the package)
 
  media_path: $(find awesome_leg)/media/horizon_trot/fixed_hip # relative path where graphs, etc.. are saved
  simulation_name: "default" # (opt results and graphs are automatically saved inside package_abs_path/media/task_name/sub_task_name/today_date/simulation_name) 

  opt_results_path: $(find awesome_leg)/opt_results/horizon_trot/fixed_hip

  horizon_solver: # horizon optimization problem-specific parameters

    save_sol_as_init: false # if true, the solution is also saved as a candidate for future optimization initializations

    employ_opt_init: false # whether to use the initial guess or not
    
    problem_settings:

      n_nodes: 100 # total number of nodes
      n_takeoff: 50 # node @ takeoff
      dt: 0.005 # delta t between nodes of the optimizer

      forward_vel: 3 # forward velocity of the trot

      tip_ground_clearance: 0.1 # enforced tip clearance at a specified point in the flight phase (specified by "flight_phase_tip_clearance_percentage")
      flight_phase_tip_clearance_percentage: 0.5 # 0.0-1.0; when the tip clearance constraint is to be enforced w.r.t. the flight phase (e.g. 0.5-> @ 50%)

      solver:
        name: "ipopt"
        tolerance: 0.0001
        max_iter: 1000
        linear_solver_name: "ma57"    

      cost_weights:

        weight_forward_vel: 100000.0 # cost weight for forcing an overall constant hip advancing velocity
        small_q_p_ddot: 0.1 # cost for the joint accelerations
        weight_min_input_diff: 1000 # cost for penalizing differences between successive inputs

  horizon_plotter: # custom plot utility settings

    show_plots: true # whether or not to show the plots when the plotter node is run
    save_fig: true # whether or not to save figures to the destination folder (defaults to true if show_plots is false)
  
  horizon_i_q_estimator: 

    tanh_coeff: 20 # coefficient used by the approximated sign function ( sign = atanh(tanh_coeff * x) ). Kd0 and Kd1 are found in actuators.yaml