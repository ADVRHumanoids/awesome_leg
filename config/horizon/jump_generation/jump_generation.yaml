full_gen:

  i_q_estimation:

    tanh_coeff: 20

  resampling:
    dt: 0.004

  problem:

    n_int: 100

    takeoff_node: 95

    dt_lb: 0.0001
    dt_ub: 0.1

    jnt_limit_margin: 0.04
    jnt_vel_limit_margin: 0.05

    is_iq_cnstrnt: true
    is_friction_cone: true

    friction_cnstrnt: 
      mu_friction_cone: 0.6

    weights: 

      use_same_weights: true 
      
      ig_generation:

        scale_factor_costs_base: 100000 # scale factor for costs (other scalings are applied internally)
        
        weight_f_contact: 0.0001 # cost for penalizing contact forces
        weight_f_contact_diff: 0.0001 # cost for penalizing differences between successive f_contacts
        weight_q_p_dot: -1
        weight_q_p_ddot: 0.0000001 # cost for penalizing joint accelerations (which are the input)
        weight_q_p_ddot_diff: -1 # cost for penalizing differences between successive inputs

        weight_com_term_vel: 1000
        weight_com_vel: -1
        weight_tip_under_hip: -1

        weight_sat_i_q: -1 # try to saturate the joint current, while keeping it within bounds

        weight_com_vel_vert_at_takeoff: -1 # try to keep vertical CoM at takeoff

        weight_com_pos: 100 # maximize terminal com pos at the end of the horizon

      refinement:

        scale_factor_costs_base: 100000 # scale factor for costs (other scalings are applied internally)
        
        weight_f_contact: 0.0001 # cost for penalizing contact forces
        weight_f_contact_diff: 0.0001 # cost for penalizing differences between successive f_contacts
        weight_q_p_dot: -1
        weight_q_p_ddot: 0.0000001 # cost for penalizing joint accelerations (which are the input)
        weight_q_p_ddot_diff: -1 # cost for penalizing differences between successive inputs

        weight_com_term_vel: 1000
        weight_com_vel: -1
        weight_tip_under_hip: -1

        weight_sat_i_q: -1 # try to saturate the joint current, while keeping it within bounds

        weight_com_vel_vert_at_takeoff: -1 # try to keep vertical CoM at takeoff

        weight_com_pos: 100 # maximize terminal com pos at the end of the horizon

  solver:
    ipopt_tol: 0.000001
    ipopt_maxiter: 10000
    ipopt_cnstr_viol_tol: 0.0000001
    ipopt_lin_solver: "mumps" 
    name: "ipopt"

  transcription:
    name: "multiple_shooting"
    integrator_name: "RK4"

up2apex_gen:

  i_q_estimation:

    tanh_coeff: 20

  resampling:
    dt: 0.001

  problem:

    n_int: 100

    takeoff_node: 49

    dt_lb: 0.0001
    dt_ub: 0.1

    jnt_limit_margin: 0.04
    jnt_vel_limit_margin: 0.05

    is_iq_cnstrnt: true
    is_friction_cone: true

    friction_cnstrnt: 
      mu_friction_cone: 0.6

    weights: 

      use_same_weights: true 
      
      ig_generation:

        scale_factor_costs_base: 100000 # scale factor for costs (other scalings are applied internally)
        
        weight_f_contact: 0.0001 # cost for penalizing contact forces
        weight_f_contact_diff: 0.0001 # cost for penalizing differences between successive f_contacts
        weight_q_p_dot: -1
        weight_q_p_ddot: 0.0000001 # cost for penalizing joint accelerations (which are the input)
        weight_q_p_ddot_diff: -1 # cost for penalizing differences between successive inputs

        weight_com_term_vel: 10
        weight_com_vel: -1
        weight_tip_under_hip: -1

        weight_sat_i_q: -1 # try to saturate the joint current, while keeping it within bounds

        weight_com_vel_vert_at_takeoff: -1 # try to keep vertical CoM at takeoff

        weight_com_pos: 1 # maximize terminal com pos at the end of the horizon

      refinement:

        scale_factor_costs_base: 100000 # scale factor for costs (other scalings are applied internally)
        
        weight_f_contact: 0.0001 # cost for penalizing contact forces
        weight_f_contact_diff: 0.0001 # cost for penalizing differences between successive f_contacts
        weight_q_p_dot: -1
        weight_q_p_ddot: 0.0000001 # cost for penalizing joint accelerations (which are the input)
        weight_q_p_ddot_diff: -1 # cost for penalizing differences between successive inputs

        weight_com_term_vel: 10
        weight_com_vel: -1
        weight_tip_under_hip: -1

        weight_sat_i_q: -1 # try to saturate the joint current, while keeping it within bounds

        weight_com_vel_vert_at_takeoff: -1 # try to keep vertical CoM at takeoff

        weight_com_pos: 1 # maximize terminal com pos at the end of the horizon

        ig_tracking:
          
          weight_q_tracking: -1

          weight_tip_tracking: -1


  solver:
    ipopt_tol: 0.000001
    ipopt_maxiter: 10000
    ipopt_cnstr_viol_tol: 0.0000001
    ipopt_lin_solver: "mumps" 
    name: "ipopt"

  transcription:
    name: "multiple_shooting"
    integrator_name: "RK4"

pretakeoff_gen:

  i_q_estimation:

    tanh_coeff: 20

  resampling:
    dt: 0.004

  problem:

    n_int: 100

    takeoff_node: 95

    dt_lb: 0.0001
    dt_ub: 0.1

    jnt_limit_margin: 0.04
    jnt_vel_limit_margin: 0.05

    is_iq_cnstrnt: true
    is_friction_cone: true

    friction_cnstrnt: 
      mu_friction_cone: 0.6

    weights: 

      scale_factor_costs_base: 100000 # scale factor for costs (other scalings are applied internally)
      
      weight_f_contact: 0.0001 # cost for penalizing contact forces
      weight_f_contact_diff: 0.0001 # cost for penalizing differences between successive f_contacts
      weight_q_p_dot: -1
      weight_q_p_ddot: 0.0000001 # cost for penalizing joint accelerations (which are the input)
      weight_q_p_ddot_diff: -1 # cost for penalizing differences between successive inputs

      weight_com_term_vel: 1000
      weight_com_vel: -1
      weight_tip_under_hip: -1

      weight_sat_i_q: -1 # try to saturate the joint current, while keeping it within bounds

      weight_com_vel_vert_at_takeoff: -1 # try to keep vertical CoM at takeoff

      weight_com_pos: 100 # maximize terminal com pos at the end of the horizon

  solver:
    ipopt_tol: 0.000001
    ipopt_maxiter: 10000
    ipopt_cnstr_viol_tol: 0.0000001
    ipopt_lin_solver: "mumps" 
    name: "ipopt"

  transcription:
    name: "multiple_shooting"
    integrator_name: "RK4"


